let x = !"hi";
    typeof(x) = (string as Not).Output = T1

let y = "str" + "ing";
    typeof(y) = (string as Add<string>).Output = T2

let z = x + y;
    typeof(z) = (T1 as Add<T2>).Output = T3

let a = &z;
    typeof(a) = &T3



trait Testing {
    fn new();
    fn handle_self(&self);
}

struct B {
    public value: int;
}

impl Testing for B {
    fn new() {}
    fn handle_self(&self) {}
}

let b = B { value: 4 };
    // typeof(b) = StructLiteral
    // typeof(b.value) = int
    // typeof(b.new) = = (B as Testing).new = T4
    // typeof(b.handle_self) = (B as Testing).handle_self = T5