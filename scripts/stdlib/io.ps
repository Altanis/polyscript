import { print_char, eprint_char, getchar } from "@intrinsics";
import { exit } from "stdlib/process.ps";
import { String, ToString } from "stdlib/string.ps";

fn print<T: ToString>(data: T) {
    let string = [T as ToString].to_string(data);
    for (let i = 0; i < string.length(); i += 1) {
        print_char(string.get(i));
    }
}

fn println<T: ToString>(data: T) {
    print(data);
    print_char('\n');
}

fn eprint<T: ToString>(data: T) {
    let string = [T as ToString].to_string(data);
    for (let i = 0; i < string.length(); i += 1) {
        eprint_char(string.get(i));
    }
}

fn eprintln<T: ToString>(data: T) {
    eprint(data);
    eprint_char('\n');
}

fn panic<T: ToString>(data: T): never {
    eprintln(data);
    exit(1);
}

fn unreachable<T: ToString>(data: T): never {
    panic(data);
}

fn read_char(): char {
    getchar()
}

fn read_line(): String {
    let s = String.new();
    while (true) {
        let c = getchar();
        if (c == '\n') { break; };
        s.push(c);
    }

    s
}

export { print, eprint, println, eprintln, panic, unreachable, read_char, read_line };