import { strlen, strget } from "@intrinsics";
import { Vec } from "stdlib/vec.ps";

// A structure representing a mutable, extensible String.
struct String {
    // The internal representation of the string, in characters.
    private chars: Vec<char>;
}

impl String {
    // Constructs a new string. This function does not reserve any memory for the string.
    public fn new(): Self {
        Self { chars: [Vec<char>].new() }
    }

    // Constructs a new string with space for `n` elements.
    public fn from_capacity(n: int): Self {
        Self { chars: [Vec<char>].from_capacity(n) }
    }
    
    // Constructs a new string from a constant str `s`.
    public fn from_str(s: str): Self {
        let len = strlen(s);
        let chars = [Vec<char>].from_capacity(len);

        for (let i = 0; i < len; i += 1) {
            chars.push(strget(s, i));
        }

        Self { chars }
    }

    // Constructs a new string from a character `c`.
    public fn from_char(c: char): Self {
        let chars = [Vec<char>].from_capacity(1);
        chars.push(c);

        Self { chars }
    }

    // Gets the length of the string.
    public fn length(&self): int {
        self.chars.length()
    }

    // Gets the `i`-th character in the string.
    public fn get(&self, i: int): char {
        *self.chars.get(i)
    }
}

trait ToString {
    fn to_string(&self): String;
}

impl ToString for str {
    fn to_string(&self): String {
        String.from_str(*self)
    }
}

impl ToString for char {
    fn to_string(&self): String {
        String.from_char(*self)
    }
}

impl ToString for bool {
    fn to_string(&self): String {
        if (*self) {
            String.from_str("true")
        } else {
            String.from_str("false")
        }
    }
}

impl ToString for String {
    fn to_string(&self): String {
        *self
    }
}

export { String, ToString };