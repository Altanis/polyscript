type Adder = fn(int, int): int;
type IdentitySignature[T] = fn(T): T;

// Defining a function as a let expr requires anonymous function syntax.
let adder: Adder = fn(x: int, y: int) {
    return x + y;
};

let identity_int: IdentitySignature[int] = fn(x: int) {
    return x;
};

// Or, you may assign it directly to a function by reference.
fn identity_generic[T](x: T): T {
    return x;
}

let identity_string: IdentitySignature[string] = identity_generic;

let s = adder(5, 3);
let y = identity_string("s");
let n = identity_int(3);