trait TAddable {
    fn add(self, other: Self): Self;
}

trait TSubbable {
    fn sub(self, other: Self): Self;
}

impl TAddable for int {
    fn add(self, other: Self): Self {
        return self + other;
    }
}

impl TSubbable for int {
    fn sub(self, other: Self): Self {
        return self - other;
    }
}

fn identity<T>(x: T): T {
    return x;
}

fn generic_pair<A: TAddable + TSubbable, B: TAddable + TSubbable>(a: A, b: B) {}

let identity_value = identity(5);
generic_pair(5, "3");

struct Vector2D<T: TAddable> {
    public x: T;
    public y: T;
}

let vector: Vector2D<int> = Vector2D { x: 3, y: 4 };

impl<T: TAddable> Vector2D<T> {
    public fn add(self, vector: Vector2D<T>): Vector2D<T> {
        return Vector2D {
            x: [T as TAddable].add(self.x, vector.x),
            y: [T as TAddable].add(self.x, vector.y)
        };
    }

    public fn random_method<V>(x: V) {}
}

impl Vector2D<int> {
    public fn merge(self): int {
        return self.x + self.y;
    }
}

let vector1: Vector2D<int> = Vector2D { x: 3, y: 3 };
let resultant = vector1.add(Vector2D { x: 4, y: 4 });
[Vector2D<int>].random_method("hi");
let merged = vector1.merge();


struct S<T> {x:T;}
fn identity_S<X>(x: S<X>): S<X> { x }
let x : S<int> = identity_S(S{x:1});

struct Type<A> {
    x: A;
}

impl<U> Type<U> {
    fn test(&self, other: &Self) {}
}

let v1 = Type { x: 3 };
let v2 = Type { x: 4 };
let v3 = Type { x: '5' };

v1.test(&v2);
// error: incompatible types U = char and U = int
// v1.test(&v3);

struct Vector3D<T, U> {
    x: T;
    y: U;
    z: float;
}

impl<T, U> Vector3D<T, U> {
    fn operation(&self, other: &Self): int {
        return 0;
    }
}

impl Vector3D<int, float> {
    fn default(): Self {
        return Vector3D { x: 0, y: 0.0, z: 0.0 };
    }
}

impl Vector3D<float, float> {
    fn test(&self) {

    }
}

let v4: Vector3D<int, float> = [Vector3D<int, float>].default();
let v5: Vector3D<int, float> = [Vector3D<int, float>].default();

let res: int = v4.operation(&v5);

let v6 = Vector3D { x: 0.0, y: 0.0, z: 1.0 };
v6.test();