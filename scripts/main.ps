## TEST 0: EXPRESSIONS
# !(-a++ + ~b-- * (c ** d % e / f) - g) &= ((h += i) *= (j -= k) ^= (l /= m %= n)) >> o << p | q & r ^ s && t || u > v >= w < x <= y == z = aa;

## TEST 1: VAR DECL
# let x: int = 5 + 3 * 2 - 4 + 7 % 2;

## TEST 2: FUNCTIONS
# fn z() {}
#
# fn add(x: int = 0, y: int = 0): int {
#     let x: int = 5;
#     let y: int = 7;
# }

## TEST 3: BLOCKS
# {
#     let x: int = 5;
# }

## TEST 4: IF CHAINS
# if (1 + 1 == 2) {
#     let x = 5;
# } else if (1 + 1 == 3) {
#     let x = 4;
# } else {
#     let x = 3;
# }

## TEST 5: LOOPS
# while (false || x == 10) {
#     let x = 4;
# }
#
# for (let i = 0; i < 10; ++i) {}
#
# let j = 0;
# for (;j < 10; ++j) {}
#
# for (;;) {}

## TEST 6: CLASSES
# class User {
#     public const MAX_LOGIN_ATTEMPTS: int = 5; # static field
#     public const DEFAULT_ROLE = "user"; # type omitted, inferred as string
#     public let username = "guest"; # instance field
#     protected let failed_login_times = 0;
#     let email = "example@example.com"; # default public

#     public fn from_username(username: string): User {
#     }

#     public fn login() { # implicitly returns void

#    }

#     private fn reset_pw(this): void {}
#     protected fn lock_account(this) {}
# }

# class Admin: User {
#     public const ADMIN_PANEL_URL: string = "/admin/dashboard";
# }

## TEST 7: CONTROL FLOW
# while (true) {
#     break;
# }
# 
# for (let i = 0; i < 5; ++i) {
#     continue;
# }
# 
# fn add(a: int, b: int = 0) {
#     return a + b;
# }
# 
# fn panic(message: string) {
#     throw message;
# }