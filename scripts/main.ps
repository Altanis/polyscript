fn test1() {
    let outer_ref = {
        let f = 60;
        &f
    };

    const val = *outer_ref;
}

struct Point { x: int; }
fn test2() {
    let p2 = Point { x: 2 };
    let x = p2.x;
}

fn create_point(): Point {
    let p3 = Point { x: 1 };
    return p3;
}

fn create_ref_point(): &Point {
    let p4 = Point { x: 1 };
    &p4
}


struct Inner { public val: int; }
struct Outer { public data: Inner; }
fn test5() {
    let outer_instance = heap Outer { data: Inner { val: 0 } };
    let local_inner = Inner { val: 100 };
    outer_instance.data = local_inner;
}

struct Config { public setting: bool; }
fn helper_test6(c: &Config) {}
fn test6() {
    let my_config = Config { setting: true };
    helper_test6(&my_config);
}

struct Message { public content: string; }
fn test7(): Message {
    if (true) {
        let m = Message { content: "hello" };
        return m;
    };
    
    return Message { content: "world" };
}

struct A { public b: B; }
struct B { public c: C; }
struct C { public val: int; }
fn test8(): C {
    let my_a = A { b: B { c: C { val: 1 } } };
    let my_b = my_a.b;
    let my_c = my_b.c;
    return my_c;
}