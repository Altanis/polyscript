let x = 1;
if (x == 1) {
    let x = "4";
} else if (x == 2) {
    let x = "5";
} else {
    let x = "6";
}

type Integer = int;

fn add[T: Add](a: T, b: T): T {
    return a + b;
}

struct Point[T] {
    public x: T;
    public y: T;
}

trait VectorLike[T] {
    type Thingy;
    const EUCLIDEAN_DEFINITION: string;

    fn new(): Point[T];
    fn operation(a: Point[T], b: Point[T]): Integer;
}

impl VectorLike[Integer] for Point[Integer] {
    type Thingy = Integer;
    const EUCLIDEAN_DEFINITION = "";

    fn new(): Point[Integer] {
        return Point { x: 0, y: 0 };
    }

    fn operation(a: Point[Integer], b: Point[Integer]): Integer {
        return add(a.x, a.y);
    }
}

let point_1 = Point { x: 0, y: 0 };
let point_2 = Point { x: 0, y: 0 };