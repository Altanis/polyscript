// generics need to be constrained to traits properly
// memory safety (reference counting)

struct Scalar<T> {
    x: T;
}

impl<T> Scalar<T> {
    fn new(x: T): Self {
        Scalar { x }
    }

    fn get_num(&self): T {
        self.x
    }
}

let scalar = Scalar.new(4);
let num = scalar.get_num();

// check out impl blocks that have generics
// impl<T> Vector2D<T> { fn thing(x: T): { } }
// must monomorphize trait and impl blocks with generics FUCK