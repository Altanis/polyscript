class X {
    public const a: int = 5; # static field
    public const b = 6; # types can be omitted
    public let c = "how"; # instance field
    protected let d = 4;
    let f = "x"; # default public

    public fn from_a(a: int): X {

    }

    public fn x() { # implicitly returns void

    }

    private fn y(this): void {
        
    }

    protected fn z(this) {

    }
}

class Enes: X {
    public const STATUS: string = "SLAVE";
}

## TEST 0: EXPRESSIONS
# !(-a++ + ~b-- * (c ** d % e / f) - g) &= ((h += i) *= (j -= k) ^= (l /= m %= n)) >> o << p | q & r ^ s && t || u > v >= w < x <= y == z = aa;

## TEST 1: VAR DECL
# let x: int = 5 + 3 * 2 - 4 + 7 % 2;

## TEST 2: FUNCTIONS
# fn add(x: int = 0, y: int = 0): int {
#     let x: int = 5;
#     let y: int = 7;
# }

## TEST 3: BLOCKS
# {
#     let x: int = 5;
# }

## TEST 4: IF CHAINS
# if (1 + 1 == 2) {
#     let x = 5;
# } else if (1 + 1 == 3) {
#     let x = 4;
# } else {
#     let x = 3;
# }

## TEST 5: LOOPS
# while (false || x == 10) {
#     let x = 4;
# }
#
# for (let i = 0; i < 10; ++i) {}
#
# let j = 0;
# for (;j < 10; ++j) {}
#
# for (;;) {}