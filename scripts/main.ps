fn x(mut a: int) {}

let x = 4;
let z = usjfiko;
let y = "20";

fn add[T](a: T, b: T): T {
    return a + b;
}

struct Normalize[T] {
    public x: T;
    public y: T;
}

enum NormalizationFactor {
    High,
    Medium,
    Low
}

trait Normalizer {
    fn normalize(&this);
}

type NormalizeType[T] = T;

{
    let y = 34;
    let z = 92;
}

if (x == 1) {
    let jessie = "hi";
} else if (x == 2) {
    let james = "bye"; 
} else {
    let meowth = "that's right";
}

impl Normalize {
    public const NORMALIZATION_CONST = 3;

    public fn let_me() {}
    public fn let_us(this) {}
    public fn let_him(&this) {}
    public fn let_her(&mut this) {}
}