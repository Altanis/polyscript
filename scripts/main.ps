// memory safety (reference counting)
// real compiler that takes file input + import/export system
// default traits such as Clone, Default, ToString
// stdlib
    // io + math + vec + hashmap + string
// arrays + vectors + Indexable trait
// create String struct of Vec<u8> (maybe add unions and union [u8; 15] and Vec<u8>)
    // impl Add<str> for str {} inside file
// maybe add prelude system

struct Point<T> {
    x: T;
}

impl Point<int> {
    const precise: bool = false;
    type Implementor = int;

    fn default(): Self {
        Point { x: 1 }
    }
}

impl Point<float> {
    const precise: bool = true;
    type Implementor = float;

    fn default(): Self {
        Point { x: 1.0 }
    }
}

let val = [Point<int>].precise;
let val2: [Point<float>].Implementor = 3.0;

let p1: Point<int> = [Point<int>].default();
let p2: Point<float> = [Point<float>].default();