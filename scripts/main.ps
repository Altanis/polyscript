// memory safety (reference counting)
    // when finished, add trait Drop that can be implemented on types
// real compiler that takes file input + import/export system
// default traits such as Clone, Default, ToString
// stdlib
    // io + math + vec + hashmap + string
// arrays + vectors + Indexable trait
// create String struct of Vec<u8> (maybe add unions and union [u8; 15] and Vec<u8>)
    // impl Add<str> for str {} inside file
// maybe add prelude system

fn pick(x: int, y: int, flag: bool): int {
    if (flag) {
        x
    } else {
        y
    }
}

pick(3, 4, false);




struct X { x: int; }
struct Point { x: X; }

fn wow(): Point {
    let x = X { x: 4 };
    let p = heap (Point { x });
    p
}

let point = wow();
(point.x).x; // this is UB unless x is forced heap alloc